{
  "hash": "108adfafbad957030a56645646aae4d0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Fitting the outcome model\"\nauthor: \"Malcolm Barrett\"\ninstitute: \"Stanford University\"\nformat: \"kakashi-revealjs\"\n---\n\n\n\n## Outcome Model {.large}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(broom)\n\nlm(outcome ~ exposure, data = df, weights = wts) |>\n  tidy()\n```\n:::\n\n\n. . .\n\n‚úÖ This will get us the point estimate  \n\n. . .\n\n‚ùå This will get NOT us the correct confidence intervals  \n\n. . .\n\nüì¶ Let's bootstrap them with rsample\n\n## 1. Create a function to run your analysis once on a sample of your data\n\n::: {.small}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|1-2|5-13|16-18|21-22\"}\nfit_ipw <- function(.split, ...) {\n  .df <- as.data.frame(.split)\n  \n  # fit propensity score model\n  propensity_model <- glm(\n    qsmk ~ sex + \n      race + age + I(age^2) + education + \n      smokeintensity + I(smokeintensity^2) + \n      smokeyrs + I(smokeyrs^2) + exercise + active + \n      wt71 + I(wt71^2), \n    family = binomial(), \n    data = .df\n  )\n  \n  # calculate inverse probability weights\n  .df <- propensity_model |>\n    augment(type.predict = \"response\", data = .df) |>\n    mutate(wts = wt_ate(.fitted, qsmk, exposure_type = \"binary\"))\n  \n  # fit correctly bootstrapped ipw model\n  lm(wt82_71 ~ qsmk, data = .df, weights = wts) |>\n    tidy()\n}\n```\n:::\n\n:::\n\n## 2. Use {rsample} to bootstrap our causal effect\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"|4-8\"}\nlibrary(rsample)\n\n# fit ipw model to bootstrapped samples\nbootstrapped_nhefs <- bootstraps(\n  nhefs_complete_uc, \n  times = 1000, \n  apparent = TRUE\n)\n\nbootstrapped_nhefs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Bootstrap sampling with apparent sample \n# A tibble: 1,001 √ó 2\n   splits             id           \n   <list>             <chr>        \n 1 <split [1566/558]> Bootstrap0001\n 2 <split [1566/582]> Bootstrap0002\n 3 <split [1566/570]> Bootstrap0003\n 4 <split [1566/596]> Bootstrap0004\n 5 <split [1566/566]> Bootstrap0005\n 6 <split [1566/550]> Bootstrap0006\n 7 <split [1566/569]> Bootstrap0007\n 8 <split [1566/583]> Bootstrap0008\n 9 <split [1566/559]> Bootstrap0009\n10 <split [1566/599]> Bootstrap0010\n# ‚Ñπ 991 more rows\n```\n\n\n:::\n:::\n\n\n## 2. Use {rsample} to bootstrap our causal effect\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfit_ipw(bootstrapped_nhefs$splits[[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 √ó 5\n  term        estimate std.error statistic  p.value\n  <chr>          <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)     2.09     0.279      7.50 1.03e-13\n2 qsmk            3.45     0.396      8.73 6.51e-18\n```\n\n\n:::\n:::\n\n\n## 2. Use {rsample} to bootstrap our causal effect\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nipw_results <- bootstrapped_nhefs |> \n  mutate(boot_fits = map(splits, fit_ipw)) \n\nipw_results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Bootstrap sampling with apparent sample \n# A tibble: 1,001 √ó 3\n   splits             id            boot_fits       \n   <list>             <chr>         <list>          \n 1 <split [1566/558]> Bootstrap0001 <tibble [2 √ó 5]>\n 2 <split [1566/582]> Bootstrap0002 <tibble [2 √ó 5]>\n 3 <split [1566/570]> Bootstrap0003 <tibble [2 √ó 5]>\n 4 <split [1566/596]> Bootstrap0004 <tibble [2 √ó 5]>\n 5 <split [1566/566]> Bootstrap0005 <tibble [2 √ó 5]>\n 6 <split [1566/550]> Bootstrap0006 <tibble [2 √ó 5]>\n 7 <split [1566/569]> Bootstrap0007 <tibble [2 √ó 5]>\n 8 <split [1566/583]> Bootstrap0008 <tibble [2 √ó 5]>\n 9 <split [1566/559]> Bootstrap0009 <tibble [2 √ó 5]>\n10 <split [1566/599]> Bootstrap0010 <tibble [2 √ó 5]>\n# ‚Ñπ 991 more rows\n```\n\n\n:::\n:::\n\n\n## 2. Use {rsample} to bootstrap our causal effect\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](09-outcome-model_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n## 3. Pull out the causal effect\n\n\n::: {.cell layout-align=\"center\" output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\n# get t-statistic-based CIs\nboot_estimate <- int_t(ipw_results, boot_fits) |> \n  filter(term == \"qsmk\")\n\nboot_estimate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 √ó 6\n  term  .lower .estimate .upper .alpha .method  \n  <chr>  <dbl>     <dbl>  <dbl>  <dbl> <chr>    \n1 qsmk    2.50      3.45   4.36   0.05 student-t\n```\n\n\n:::\n:::\n\n\n## *Your Turn*\n\n`<div class=\"countdown\" id=\"timer_0392a405\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">08</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>`{=html}\n\n### Create a function called `ipw_fit` that fits the propensity score model and the weighted outcome model for the effect between `park_extra_magic_morning` and `wait_minutes_posted_avg`\n\n### Using the `bootstraps()` and `int_t()` functions to estimate the final effect.\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"09-outcome-model_files/libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"09-outcome-model_files/libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}