{
  "hash": "b640bba654a4d644e185d8f9a7101928",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Causal Diagrams in R\"\nauthor: \"Malcolm Barrett\"\ninstitute: \"Stanford University\"\nformat: \"kakashi-revealjs\"\n---\n\n## {background-color=\"#23373B\" .center .huge}\n\n\n\n### **Draw your causal assumptions with causal directed acyclic graphs (DAGs)**\n\n## The basic idea {background-color=\"#23373B\"}\n\n1. Specify your causal question\n1. Use domain knowledge\n1. Write variables as nodes\n1. Write causal pathways as arrows (edges)\n\n## ![](img/hex/ggdag.png){.absolute top=0 right=0 width=140}\n\n## ![](img/hex/ggdag.png){.absolute top=0 right=0 width=140}\n\n<br />\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/ggdagitty.png){fig-align='center' width=100% height=100%}\n:::\n:::\n\n\n## ![](img/hex/ggdag.png){.absolute top=0 right=0 width=140}\n\n<br />\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/ggdagitty_alg.png){fig-align='center' width=100% height=100%}\n:::\n:::\n\n\n\n## ![](img/hex/ggdag.png){.absolute top=0 right=0 width=140}\n\n<br />\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/ggdagitty_plots.png){fig-align='center' width=100% height=100%}\n:::\n:::\n\n\n\n## ![](img/hex/ggdag.png){.absolute top=0 right=0 width=140}\n\n<br />\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/tidy_ggdagitty.png){fig-align='center' width=100% height=100%}\n:::\n:::\n\n\n## Step 1: Specify your DAG \n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|2|3\"}\nlibrary(ggdag)\ndagify(\n  cancer ~ smoking, \n  coffee ~ smoking\n)\n```\n:::\n\n\n## Step 1: Specify your DAG\n\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\ndagify(\n  cancer ~ smoking, \n  coffee ~ smoking \n) |> ggdag()\n```\n\n::: {.cell-output-display}\n![](04-dags_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Step 1: Specify your DAG\n\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\ndagify(\n  cancer ~ smoking + coffee, \n  coffee ~ smoking \n) |> ggdag()\n```\n\n::: {.cell-output-display}\n![](04-dags_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## *Your Turn 1* (**`04-dags-exercises.qmd`**) {.small}\n\n### Specify a DAG with `dagify()`. Write your assumption that `smoking` causes `cancer` as a formula. \n### We're going to assume that coffee does not cause cancer, so there's no formula for that. But we still need to declare our causal question. Specify \"coffee\" as the exposure and \"cancer\" as the outcome (both in quotations marks).\n### Plot the DAG using `ggdag()`\n### Finish early? Try the *stretch goals*\n\n`<div class=\"countdown\" id=\"timer_434838f4\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>`{=html}\n\n## *Your Turn 1* (`02-dags-exercises.qmd`)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncoffee_cancer_dag <- dagify(\n  cancer ~ smoking,\n  smoking ~ addictive,\n  coffee ~ addictive,\n  exposure = \"coffee\",\n  outcome = \"cancer\",\n  labels = c(\n    \"coffee\" = \"Coffee\", \n    \"cancer\" = \"Lung Cancer\", \n    \"smoking\" = \"Smoking\", \n    \"addictive\" = \"Addictive \\nBehavior\"\n  )\n)\n```\n:::\n\n\n---\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggdag(coffee_cancer_dag)\n```\n\n::: {.cell-output-display}\n![](04-dags_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n---\n\n## Causal effects and backdoor paths {.large}\n\n. . .\n\n**Ok, correlation != causation. But why not?**\n\n. . .\n\n**We want to know if `x -> y`...**\n\n. . .\n\n**But other paths also cause associations**\n\n## `ggdag_paths()` {.large}\n\nIdentify \"backdoor\" paths\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggdag_paths(smk_wt_dag)\n```\n:::\n\n\n---\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-dags_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## *Your Turn 2* {.small}\n\n### Call `tidy_dagitty()` on `coffee_cancer_dag` to create a tidy DAG, then pass the results to `dag_paths()`. What's different about these data?\n### Plot the open paths with `ggdag_paths()`. (Just give it `coffee_cancer_dag` rather than using `dag_paths()`; the quick plot function will do that for you.) Remember, since we assume there is *no* causal path from coffee to lung cancer, any open paths must be confounding pathways. \n### Finish early? Try the *stretch goals*\n\n`<div class=\"countdown\" id=\"timer_fa9807df\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">04</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>`{=html}\n\n## *Your Turn 2*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncoffee_cancer_dag |>\n  tidy_dagitty() |>\n  dag_paths()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A DAG with 4 nodes and 3 edges\n#\n# Exposure: coffee\n# Outcome: cancer\n#\n# A tibble: 5 × 11\n  set   name           x     y direction to       xend  yend\n  <chr> <chr>      <dbl> <dbl> <fct>     <chr>   <dbl> <dbl>\n1 1     addictive -1.59  -2.26 ->        coffee -2.72  -1.83\n2 1     addictive -1.59  -2.26 ->        smoki… -0.334 -2.73\n3 1     cancer     0.801 -3.16 <NA>      <NA>   NA     NA   \n4 1     coffee    -2.72  -1.83 <NA>      <NA>   NA     NA   \n5 1     smoking   -0.334 -2.73 ->        cancer  0.801 -3.16\n# ℹ 3 more variables: circular <lgl>, label <chr>,\n#   path <chr>\n```\n\n\n:::\n:::\n\n\n---\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncoffee_cancer_dag |>\n  ggdag_paths()\n```\n\n::: {.cell-output-display}\n![](04-dags_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n---\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-dags_files/figure-revealjs/unnamed-chunk-14-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n---\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-dags_files/figure-revealjs/unnamed-chunk-15-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n---\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-dags_files/figure-revealjs/unnamed-chunk-16-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n---\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-dags_files/figure-revealjs/unnamed-chunk-17-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n---\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-dags_files/figure-revealjs/unnamed-chunk-18-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n---\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-dags_files/figure-revealjs/unnamed-chunk-19-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n## Closing backdoor paths {.large}\n\n. . .\n\n**We need to account for these open, non-causal paths**\n\n. . .\n\n**Randomization**\n\n. . .\n\n**Stratification, adjustment, weighting, matching, etc.**\n\n## Identifying adjustment sets\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nggdag_adjustment_set(smk_wt_dag)\n```\n\n::: {.cell-output-display}\n![](04-dags_files/figure-revealjs/unnamed-chunk-20-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n## Identifying adjustment sets\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(dagitty)\nadjustmentSets(smk_wt_dag)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n{ active, age, education, exercise, race, sex, smokeintensity,\n  smokeyrs, wt71 }\n```\n\n\n:::\n:::\n\n\n## *Your Turn 3* {.small}\n\n### Now that we know the open, confounding pathways (sometimes called \"backdoor paths\"), we need to know how to close them! First, we'll ask {ggdag} for adjustment sets, then we would need to do something in our analysis to account for at least one adjustment set (e.g. multivariable regression, weighting, or matching for the adjustment sets).\n\n### Use `ggdag_adjustment_set()` to visualize the adjustment sets. Add the arguments `use_labels = \"label\"` and `text = FALSE`.\n### Write an R formula for each adjustment set, as you might if you were fitting a model in `lm()` or `glm()`\n\n### Finish early? Try the *stretch goals*\n\n`<div class=\"countdown\" id=\"timer_6dd80e41\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">04</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>`{=html}\n\n## *Your Turn 3*\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code}\nggdag_adjustment_set(\n  coffee_cancer_dag, \n  use_labels = \"label\", \n  text = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](04-dags_files/figure-revealjs/unnamed-chunk-22-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n## *Your Turn 3*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncancer ~ coffee + addictive\ncancer ~ coffee + smoking\n```\n:::\n\n\n\n## Let's prove it!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(1234)\ndag_data <- coffee_cancer_dag |> \n  simulate_data(-.6)\n```\n:::\n\n\n## Let's prove it!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndag_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 500 × 4\n   addictive  cancer coffee smoking\n       <dbl>   <dbl>  <dbl>   <dbl>\n 1    0.0708  2.87   -0.565 -1.79  \n 2    0.626   1.63    0.434 -1.35  \n 3    1.98    1.43   -0.182 -1.62  \n 4   -0.198  -0.223   0.133  0.960 \n 5    1.66    0.0696  0.437  0.0954\n 6    1.37    0.765  -2.18  -1.41  \n 7    0.791   0.0460 -0.745 -0.876 \n 8    0.531   0.813  -1.44  -0.432 \n 9   -0.861   0.708   0.415  0.220 \n10   -1.40    0.801   0.439  0.472 \n# ℹ 490 more rows\n```\n\n\n:::\n:::\n\n\n## Let's prove it!\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-dags_files/figure-revealjs/unnamed-chunk-26-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Time-ordering\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-dags_files/figure-revealjs/unnamed-chunk-27-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## {background-color=\"#23373B\" .large .center .middle}\n\n### **don't adjust for the future!**\n\n## *Your Turn 4*\n\nRecreate the DAG we've been working with using `time_ordered_coords()`, then visualize the DAG. You don't need to use any arguments for this function, so `coords = time_ordered_coords()` will do.\n\n`<div class=\"countdown\" id=\"timer_c29235ec\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>`{=html}\n\n## *Your Turn 4*\n\n\n::: {.cell layout-align=\"center\" output-location='slide'}\n\n```{.r .cell-code  code-line-numbers=\"|7\"}\ncoffee_cancer_dag_to <- dagify(\n  cancer ~ smoking,\n  smoking ~ addictive,\n  coffee ~ addictive,\n  exposure = \"coffee\",\n  outcome = \"cancer\",\n  coords = time_ordered_coords(),\n  labels = c(\n    \"coffee\" = \"Coffee\", \n    \"cancer\" = \"Lung Cancer\", \n    \"smoking\" = \"Smoking\", \n    \"addictive\" = \"Addictive \\nBehavior\"\n  )\n)\n\nggdag(coffee_cancer_dag_to, use_labels = \"label\", text = FALSE)\n```\n\n::: {.cell-output-display}\n![](04-dags_files/figure-revealjs/unnamed-chunk-28-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Choosing what variables to include {.large}\n\n. . .\n\n**Adjustment sets and domain knowledge**\n\n. . .\n\n**Conduct sensitivity analysis if you don't have something important**\n\n---\n\n## Common trip ups {.large}\n\n. . .\n\n**Using prediction metrics**\n\n. . .\n\n**The 10% rule**\n\n. . .\n\n**Predictors of the outcome, predictors of the exposure**\n\n. . .\n\n**Forgetting to consider time-ordering (something has to happen before something else to cause it!)**\n\n. . .\n\n**Selection bias and colliders (more later!)**\n\n. . .\n\n**Incorrect functional form for confounders (e.g. BMI often non-linear)**\n\n## Resources: ggdag vignettes {background-color=\"#23373B\"}\n### [An Introduction to ggdag](https://ggdag.malco.io/articles/intro-to-ggdag.html)\n### [An Introduction to Directed Acyclic Graphs](https://ggdag.malco.io/articles/intro-to-dags.html)\n### [Common Structures of Bias](https://ggdag.malco.io/articles/bias-structures.html)\n",
    "supporting": [
      "04-dags_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"04-dags_files/libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"04-dags_files/libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}