---
title: "Fitting the outcome model"
author: "Malcolm Barrett"
institute: "Stanford University"
format: "kakashi-revealjs"
---

```{r}
#| label: setup
#| include: false
options(
  tibble.max_extra_cols = 6, 
  tibble.width = 60
)
library(tidyverse)
library(broom)
library(propensity)
library(causaldata)
nhefs_complete_uc <- nhefs_complete |>
  filter(censored == 0)
```

## Outcome Model {.large}

```{r}
#| eval: false
library(broom)

lm(outcome ~ exposure, data = df, weights = wts) |>
  tidy()
```

. . .

`r emo::ji("check")` This will get us the point estimate  

. . .

`r emo::ji("x")` This will get NOT us the correct confidence intervals  

. . .

`r emo::ji("package")` Let's bootstrap them with rsample

## 1. Create a function to run your analysis once on a sample of your data

::: {.small}

```{r}
#| code-line-numbers: "|1-2|5-13|16-18|21-22"
fit_ipw <- function(.split, ...) {
  .df <- as.data.frame(.split)
  
  # fit propensity score model
  propensity_model <- glm(
    qsmk ~ sex + 
      race + age + I(age^2) + education + 
      smokeintensity + I(smokeintensity^2) + 
      smokeyrs + I(smokeyrs^2) + exercise + active + 
      wt71 + I(wt71^2), 
    family = binomial(), 
    data = .df
  )
  
  # calculate inverse probability weights
  .df <- propensity_model |>
    augment(type.predict = "response", data = .df) |>
    mutate(wts = wt_ate(.fitted, qsmk, exposure_type = "binary"))
  
  # fit correctly bootstrapped ipw model
  lm(wt82_71 ~ qsmk, data = .df, weights = wts) |>
    tidy()
}
```
:::

## 2. Use {rsample} to bootstrap our causal effect

```{r}
#| code-line-numbers: "|4-8"
#| output-location: slide
library(rsample)

# fit ipw model to bootstrapped samples
bootstrapped_nhefs <- bootstraps(
  nhefs_complete_uc, 
  times = 1000, 
  apparent = TRUE
)

bootstrapped_nhefs
```

## 2. Use {rsample} to bootstrap our causal effect

```{r}
fit_ipw(bootstrapped_nhefs$splits[[1]])
```

## 2. Use {rsample} to bootstrap our causal effect

```{r}
#| cache: true
#| output-location: slide
#| code-line-numbers: "|2"
ipw_results <- bootstrapped_nhefs |> 
  mutate(boot_fits = map(splits, fit_ipw)) 

ipw_results
```

## 2. Use {rsample} to bootstrap our causal effect

```{r}
#| echo: false
ipw_results |>
  mutate(
    estimate = map_dbl(
      boot_fits,
      # pull the `estimate` for `qsmk` for each fit
      \(.fit) .fit |>
        filter(term == "qsmk") |>
        pull(estimate)
    )
  ) |>
  ggplot(aes(estimate)) +
  geom_histogram(fill = "#D55E00FF", color = "white", alpha = 0.8) + 
  theme_minimal()
```


## 3. Pull out the causal effect

```{r}
#| code-line-numbers: "|2"
#| output-location: fragment
# get t-statistic-based CIs
boot_estimate <- int_t(ipw_results, boot_fits) |> 
  filter(term == "qsmk")

boot_estimate
```

## *Your Turn*

`r countdown::countdown(minutes = 8)`

### Create a function called `ipw_fit` that fits the propensity score model and the weighted outcome model for the effect between `park_extra_magic_morning` and `wait_minutes_posted_avg`

### Using the `bootstraps()` and `int_t()` functions to estimate the final effect.


